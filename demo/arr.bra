{arr.bra

Send an array to a UFP (UnIfancyfied Floating Point) object and multiply two of its elements, returning the result.
}

ArrayTest=
  ( doit
  =   
    .   
      &     
          ' ( !(ind$(a0,2)):?x
            & ind$(a0,3)
            & !a0:?y
            & !x*!y
            )
        : ?calc1
      & lst$calc1
      & new$(calculation,!calc1):?clc1
      & (clc1..print)$
      &     (clc1..calculate)
          $ (2,"-3",41,-"3.0E5",.)
        : ?u
      & out$(u !u)
      &     
          ' ( tbl$(T,5)
            & ind$(T,3)
            & 71:?T
            & -13/3:?(ind$(T,2))
            & "-0x1.1555555555555P+3":?(ind$(T,1))
            & !(ind$(T,3))+!(ind$(T,2))
            )
        : ?calc2
      & lst$calc2
      & new$(calculation,!calc2):?clc2
      & (clc2..print)$
      & (clc2..calculate)$:?v
      & out$(clc2 !v)
      & out$EKSPORTFLOAT!
      & (clc2..export)$(R,T):?eks
      & out$(eks !eks)
      & out$\nEKSPORTED
      & out$EKSPORTINT!
      & (clc2..export)$(N,T):?eks
      & out$(eks !eks)
      & out$\nEKSPORTED
      & out$EKSPORTFRAC!
      & (clc2..export)$(Q,T):?eks
      & out$(eks !eks)
      & out$\nEKSPORTED
      & out$EKSPORTHEX!
      & (clc2..export)$("%a",T):?eks
      & out$(eks !eks)
      & out$\nEKSPORTED
  )
  ( new
  =   
    .   ~
      |   clk$:?t0
        & (its.doit)$
        & clk$:?t1
        & out$(flt$(!t1+-1*!t0,3))
  );

r=
  get'("arr.bra",TXT)
& rmv$(str$(arr ".bak"))
& ren$("arr.bra".str$(arr ".bak"))
&   put
  $ ( "{arr.bra

Send an array to a UFP (UnIfancyfied Floating Point) object and multiply two of its elements, returning the result.
}

"
    , "arr.bra"
    , NEW
    , BIN
    )
& lst'(ArrayTest,"arr.bra",APP)
& put'(\n,"arr.bra",APP,BIN)
& lst'(r,"arr.bra",APP)
& put$(str$("\nnew'" ArrayTest ";\n"),"arr.bra",APP,BIN)
& ;

new'ArrayTest;
