{mandelbrot.bra

for each pixel (Px, Py) on the screen do
    x0 := scaled x coordinate of pixel (scaled to lie in the Mandelbrot X scale (-2.00, 0.47))
    y0 := scaled y coordinate of pixel (scaled to lie in the Mandelbrot Y scale (-1.12, 1.12))
    x := 0.0
    y := 0.0
    iteration := 0
    max_iteration := 1000
    while (x*x + y*y ≤ 2*2 AND iteration < max_iteration) do
        xtemp := x*x - y*y + x0
        y := 2*x*y + y0
        x := xtemp
        iteration := iteration + 1
    
    color := palette[iteration]
    plot(Px, Py, color)

}

Mandelbrot=
  ( doit
  =   
    .   1000:?iterations
      & 2000:?xpixels:?ypixels
      &   glf$('(<.$iterations))
        : (=?"<iterations")
      & 256*!iterations^-1:?colfactor
      &     
          ' (   (s.xpixels)
                (s.ypixels)
                (s.X)
                (s.Y)
                (s.R)
            .   !X+-1*!R:?beginx
              & !X+!R:?endx
              & !Y+-1*!R:?beginy
              & !Y+!R:?endy
              &   (!endx+-1*!beginx)*(!xpixels+-1)^-1
                : ?deltax
              &   (!endy+-1*!beginy)*(!ypixels+-1)^-1
                : ?deltay
              & tbl$(T,!ypixels,!xpixels,2)
              & -1+!ypixels:?i
              &   whl
                ' ( !i:~<0
                  & -1+!xpixels:?j
                  &   whl
                    ' ( !j:~<0
                      & !j*!deltax+!beginx:?x0
                      & !i*!deltay+!beginy:?y0
                      & 0:?x:?y
                      & 1:?J
                      &   whl
                        ' ( hypot$(!x,!y):~>2
                          & !J:$"<iterations"
                          & !x*!x+-1*!y*!y+!x0:?xtemp
                          & 2*!x*!y+!y0:?y
                          & !xtemp:?x
                          & 1+!J:?J
                          )
                      &   (   !J:$"<iterations"
                            & floor$(!J*$colfactor)
                          | 0
                          )
                        : ?(idx$(T,!i,!j))
                      & !j+-1:?j
                      )
                  & !i+-1:?i
                  )
            )
        : ?calcule
      & new$(calculation,!calcule):?compiledCalcule
      & ( ~
        |   lst$calc
          & out$"ITER DEFINED"
          & (compiledCalcule..print)$
          & out$"ITER PRINTED"
        )
      & ( flt
        =   e,d,m,s,f
          .     !arg:(?arg,~<0:?d)
              & !arg:0
            |     ( -1*!arg:>0:?arg&-1
                  | 1
                  )
                : ?s
              &   10\L!arg
                :   ?e
                  + ( 10\L?m
                    | 0&1:?m
                    )
              & (   !m+1/2*1/10^!d:~<10
                  & 1+!e:?e
                  & !m*1/10:?m
                | 
                )
              & @( div$(!m+1/2*(1/10^!d:?d),!d)
                 : `%?f ?m
                 )
              &   str
                $ ( !s*!f
                    (!d:~1&"."|)
                    !m
                    E
                    !e
                  )
        )
      & (   
          &   ( ~&"[0.2929859127507,0.6117848324958,1.0E-11]"
              | &"[-0.0452407411,0.9868162204352258,2.7E-10]"
              | ~&"[-0.7450,0.1102,0.005]"
              | ~&"[-0.7463,0.1102,0.005]"
              | ~&"[0.45272105023,0.396494224267,1.4E-10]"
              | ~&"[-0.235125,0.827215,4.0E-5]"
              | ~&"[-0.722,0.246,0.019]"
              | "[-0.16070135,1.0375665,1.0E-7]"
              )
            : ?jsn
          & get$(!jsn,MEM,JSN):(,#%?X #%?Y #%?R)
        |   -2:?beginx
          & 47/100:?endx
          & -112/100:?beginy
          & 112/100:?endy
          & 1/2*(!endx+-1*!beginx):?R
          & 1/2*(!beginx+!endx):?X
          & 1/2*(!beginy+!endy):?Y
        )
      & clk$:?t0
      & (       (compiledCalcule..calculate)
              $ (!xpixels,!ypixels,!X,!Y,!R)
            : ?Result
          & out$(Result !Result)
        | out$"Calculation did not return a value."
        )
      & out$(div$(clk$+-1*!t0,1) S)
      & (compiledCalcule..export)$(N,T):(,?eks)
      & out$calculated
      &   put
        $ (   str
            $ ( P3\n
                "#Mandelbrot"
                \n
                !xpixels
                " "
                !ypixels
                \n
                255
                \n
                  map
                $ ( ( 
                    =   
                      .   !arg:(,?arg)
                        &   map
                          $ ( ( 
                              =   
                                .   !arg:
                                  | !arg " " !arg " " !arg \n
                              )
                            . !arg
                            )
                    )
                  . !eks
                  )
              )
          , "MandelbrotSetArr.pgm"
          , NEW WYD BIN
          )
      & out$eksported
  )
  ( new
  =   
    .   ~
      |   clk$:?t0
        & (its.doit)$
        & clk$:?t1
        & out$(flt$(!t1+-1*!t0,3))
  );

r=
  get'("mandelbrot.bra",TXT)
& rmv$(str$(mandelbrot ".bak"))
& ren$("mandelbrot.bra".str$(mandelbrot ".bak"))
&   put
  $ ( "{mandelbrot.bra

for each pixel (Px, Py) on the screen do
    x0 := scaled x coordinate of pixel (scaled to lie in the Mandelbrot X scale (-2.00, 0.47))
    y0 := scaled y coordinate of pixel (scaled to lie in the Mandelbrot Y scale (-1.12, 1.12))
    x := 0.0
    y := 0.0
    iteration := 0
    max_iteration := 1000
    while (x*x + y*y ≤ 2*2 AND iteration < max_iteration) do
        xtemp := x*x - y*y + x0
        y := 2*x*y + y0
        x := xtemp
        iteration := iteration + 1
    
    color := palette[iteration]
    plot(Px, Py, color)

}

"
    , "mandelbrot.bra"
    , NEW
    , BIN
    )
& lst'(Mandelbrot,"mandelbrot.bra",APP)
& put'(\n,"mandelbrot.bra",APP,BIN)
& lst'(r,"mandelbrot.bra",APP)
&   put
  $ (str$("\nnew'" Mandelbrot ";\n"),"mandelbrot.bra",APP,BIN)
& ;

new'Mandelbrot;
