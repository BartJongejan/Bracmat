### LINUX ###

# CWD must contain bracmat.c, e.g. 
cd ..
# Copy one block of text (consecutive lines without intervening blank lines)
# at a time to the command line and check that the test at the end of a 
# block went ok. (If there is a test.)


# Create stand-alone bracmat.
gcc -std=c99 -pedantic -Wall -O3 -DNDEBUG bracmat.c xml.c
mv a.out bracmat
# Test the stand-alone version of Bracmat.
# Expect a line only saying 'bracmat alife and kicking'.
./bracmat 'put$"bracmat alife and kicking\n"'


# Compile bracmat.c as relocatable code for shared object
# Create bracmatso.o and xml.o
gcc -std=c99 -pedantic -Wall -O3 -c -fPIC -DNDEBUG bracmatso.c xml.c  
cd java
# Compile java class that loads shared object libbracmat.so.
cd src
javac -d ../classes/ ./dk/cst/*.java
cd ..
# Make header file for C code that exposes methods to Java, 
# store header file between C code one level up.
javah -d ../src -classpath ./classes dk.cst.bracmat
cd classes
# Jar the java class that interfaces the native code.
jar cfv ../jar/bracmat.jar dk/cst/bracmat.class
cd ..
cd ..
# Compile the C code that exposes methods to Java.
gcc -std=c99 -pedantic -Wall -pthread -c -fPIC -DNDEBUG -I/usr/lib/jvm/java-1.6.0-sun.x86_64/include -I/usr/lib/jvm/java-1.6.0-sun.x86_64/include/linux/ dk_cst_bracmat.c -o dk_cst_bracmat.o    
# Link the two object files into a shared library (REALNAME).
gcc -shared -Wl,-soname,libbracmat.so.1 -o libbracmat.so.1.0 bracmatso.o xml.o dk_cst_bracmat.o -lpthread
# Link REALNAME to SONAME.
ln -sf libbracmat.so.1.0 libbracmat.so.1
# Link SONAME to LINKERNAME.
ln -sf libbracmat.so.1 libbracmat.so
# Compile and link test proggram that uses shared object.
gcc -std=c99 -pedantic -Wall -L. -DNDEBUG bracmattest.c -lbracmat -o bracmattest
# Set up library path.
LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH
# Test shared library.
# Expect {?} prompt. Type e.g. 1+3 <Enter> Answer {!} 4  
# Exit with Ctrl-C.
./bracmattest 

# move shared lib to a place in the java.library.path of JBoss.
# (You may have to enter your password, so we make this a separate block.)
sudo cp libbracmat.so.1.0 /usr/lib64


sudo cp libbracmat.so.1.0 /usr/lib
# The normal thing to do would be
#   sudo /sbin/ldconfig
# But we define the symbolic links by hand.
# Link REALNAME to SONAME.
sudo ln -sf /usr/lib64/libbracmat.so.1.0 /usr/lib64/libbracmat.so.1
sudo ln -sf /usr/lib/libbracmat.so.1.0 /usr/lib/libbracmat.so.1
# Link SONAME to LINKERNAME.
sudo ln -sf /usr/lib64/libbracmat.so.1 /usr/lib64/libbracmat.so
sudo ln -sf /usr/lib/libbracmat.so.1 /usr/lib/libbracmat.so
# Delete local symbolic links.
rm libbracmat.so
rm libbracmat.so.1
# Compile and link test proggram that uses shared object in offical place.
gcc -std=c99 -pedantic -Wall -DNDEBUG bracmattest.c -lbracmat -o bracmattest
# Test C-app using global shared lib.
# Expect {?} prompt. Type e.g. 1+3 <Enter> Answer {!} 4 
# Exit with Ctrl-C.
./bracmattest


cd java
#compile java test app
javac -d ./jar/ -classpath ./jar/bracmat.jar ./src/bracmattest.java
#run the test app
#sudo, because bracmat may want to write /var/log/clarin/tools.log
# Expect:
# result = 1+x^2+-1/2*x^3+5/6*x^4+-3/4*x^5
# result = Bracmat version 6, build 156 (6 May 2013)
# Version should be in accordance with what is stated in /home/bart/bracmat/bracmat.c +/- line 47
# #define DATUM "6 May 2013"
# #define VERSION "6"
# #define BUILD "156"
sudo java -classpath ./jar/bracmat.jar:./jar bracmattest
cd ..


#copy bracmat.jar to final destination(s) (Platform-dependend!)
sudo cp -p ./java/jar/bracmat.jar /usr/local/jboss/server/all/lib/
sudo cp -p ./java/jar/bracmat.jar /usr/local/jboss/server/default/lib/


### WINDOWS ###

# Windows, Visual Studio C++ (2008, 2010 Express):
# CREATE A DLL
# ------------
#       (Warning: not thread safe in Windows!)
# Create a Win32 Project "bracmatdll"
# In the Win32 Application Wizard, choose Application type "DLL", Additional option "Empty project". (Later we are going to kill off the precompiled header, which you cannot deselect in the wizard.)
# Add existing items bracmatdll.cpp, bracmatso.c, dk_cst_bracmat.c, xml.c to source files
# Edit the properties for the project:
#   General
#       Target Name
#-->        bracmat
#   C/C++
#       General
#           Additional Include Directories
#-->          C:\Program Files (x86)\Java\jdk1.7.0_10\include;C:\Program Files (x86)\Java\jdk1.7.0_10\include\win32
#-->          (Make sure to point to the installed version of the JDK, C:\Program Files (x86)\Java\jdk1.7.0_10 is just an example.)
#       Preprocessor
#           Preprocessor Definitions: 
#-->            Make sure that BRACMATDLL_EXPORTS is defined (If you called the project something different from "bracmatdll" you will have to change the <projectname>_EXPORTS string)
#               To turn off warnings against using certain standard C functions, add _CRT_SECURE_NO_DEPRECATE
#       Code generation
#           Runtime library: to make the DLL less dependent on other DLLs, you can change to
#               Multi-threaded (/MT)
#   Linker
#       Debugging
#           Generate Debug Info
#               No
#
# To test DLL with Java app
# -------------------------
#
cd java
# next lines are in java\compileme.bat as well
cd src
javac -d ../classes/ ./dk/cst/*.java
cd ../classes
jar cfv ../jar/bracmat.jar dk/cst/bracmat.class
cd ..
javac -d ./jar/ -classpath ./jar/bracmat.jar ./src/bracmattest.java
java -Djava.library.path="C:/Users/zgk261/Documents/Visual Studio 2010/Projects/Bracmat/Release/" -classpath ./jar/bracmat.jar;./jar bracmattest
